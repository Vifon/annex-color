#!/usr/bin/env python

from __future__ import print_function

import sys
import path_colorizer
import re
import os.path
import subprocess
from sys import argv
import hashlib
from collections import namedtuple

def main():
    command = subprocess.Popen(["git", "annex", "list"] + argv[1:],
                               stdout = subprocess.PIPE)

    # these options look nice on my personal annex, YMMV
    colorizer = path_colorizer.path_colorizer(hashfunc=hashlib.md5,
                                              colors=["{};1".format(x) for x in [31, 32, 33, 34, 35, 36]])
    RemoteInfo = namedtuple("RemoteInfo", ["color", "name"])
    remotes = []
    for line in command.stdout:
        line = line.decode().rstrip('\n')
        match = re.match(r'^(\|*)([^|].*)', line)
        if match:
            remotes.append(RemoteInfo(colorizer.choose_color(match.group(2)),
                                      match.group(2)))
            line = match.group(1) + remotes[-1].color + match.group(2) + colorizer.reset
        print(line)
        if not match:
            break

    def apply_colors(match):
        colored_repos = list(match.group(1))
        for i in range(0, len(remotes)):
            if colored_repos[i] == "X":
                colored_repos[i] = remotes[i].color + remotes[i].name[0] + colorizer.reset
        colored_repos = "".join(colored_repos)
        return (colored_repos + " " +
                (colorizer.colorize_path(os.path.dirname(match.group(2))) + os.path.sep
                 if os.path.dirname(match.group(2))
                 else "") +
                os.path.basename(match.group(2)))

    for line in command.stdout:
        print(re.sub(r"(.*?) (.*)", apply_colors, line.decode()), end="")

if __name__ == "__main__":
    main()
